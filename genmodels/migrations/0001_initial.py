# Generated by Django 4.2.20 on 2025-05-06 00:12

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Capability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "capabilities",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "categories",
            },
        ),
        migrations.CreateModel(
            name="InputType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="OutputType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Technology",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "technologies",
            },
        ),
        migrations.CreateModel(
            name="TimeToProduceOutput",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "times to produce output",
            },
        ),
        migrations.CreateModel(
            name="MLModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("year", models.PositiveIntegerField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("paper", models.CharField(blank=True, max_length=500)),
                ("dataset", models.CharField(blank=True, max_length=500)),
                ("output_length", models.CharField(blank=True, max_length=100)),
                ("license_type", models.CharField(blank=True, max_length=100)),
                (
                    "is_free",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "is_open_source",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "has_real_time_inference",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "are_checkpoints_available",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "can_finetune",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "can_train_from_scratch",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "low_resource",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Don't know")],
                        default="U",
                        max_length=1,
                    ),
                ),
                ("interactions", models.CharField(blank=True, max_length=500)),
                (
                    "capabilities",
                    models.ManyToManyField(blank=True, to="genmodels.capability"),
                ),
                (
                    "categories",
                    models.ManyToManyField(blank=True, to="genmodels.category"),
                ),
                (
                    "input_types",
                    models.ManyToManyField(blank=True, to="genmodels.inputtype"),
                ),
                (
                    "output_types",
                    models.ManyToManyField(blank=True, to="genmodels.outputtype"),
                ),
                ("tags", models.ManyToManyField(blank=True, to="genmodels.tag")),
                (
                    "technology",
                    models.ManyToManyField(blank=True, to="genmodels.technology"),
                ),
                (
                    "time_to_produce_output",
                    models.ManyToManyField(
                        blank=True, to="genmodels.timetoproduceoutput"
                    ),
                ),
            ],
            options={
                "verbose_name": "ML Model",
                "verbose_name_plural": "ML Models",
            },
        ),
    ]
